#!/usr/bin/env node

import { Command } from 'commander';
import { createSafe3Client } from './sdk/safedeploy/js';
import * as fs from 'fs';
import * as path from 'path';
import * as dotenv from 'dotenv';

// Load environment variables
dotenv.config();

const program = new Command();

program
  .name('safe3')
  .description('Safe3Devs QR Deploy CLI')
  .version('1.0.0');

program
  .command('deploy')
  .description('Deploy a smart contract using QR code signing')
  .option('-c, --client <client>', 'Client type (ethers or viem)', 'ethers')
  .option('-n, --network <network>', 'Network name or chain ID', '1')
  .option('-f, --file <file>', 'Contract file path')
  .option('-a, --args <args>', 'Constructor arguments (JSON string)', '[]')
  .option('-p, --project-id <id>', 'WalletConnect Project ID')
  .option('-r, --rpc-url <url>', 'Custom RPC URL')
  .action(async (options) => {
    try {
      const projectId = options.projectId || process.env.WALLETCONNECT_PROJECT_ID;
      
      if (!projectId) {
        console.error('‚ùå WalletConnect Project ID is required. Set --project-id or WALLETCONNECT_PROJECT_ID environment variable.');
        process.exit(1);
      }

      // Parse network
      const chainId = parseInt(options.network) || getChainIdByName(options.network);
      
      // Parse constructor arguments
      const args = JSON.parse(options.args);

      console.log('üöÄ Safe3Devs QR Deploy CLI');
      console.log('==========================');
      console.log(`üì± Client: ${options.client}`);
      console.log(`üåê Network: ${options.network} (Chain ID: ${chainId})`);
      
      // Create Safe3 client
      const client = createSafe3Client({
        client: options.client,
        projectId,
        chainId,
        rpcUrl: options.rpcUrl,
        metadata: {
          name: 'Safe3Devs CLI Deploy',
          description: 'Deploy contracts via CLI with QR signing',
          url: 'https://safe3devs.com',
          icons: ['https://safe3devs.com/icon.png']
        }
      });

      // Connect to wallet
      console.log('\nüîó Connecting to wallet...');
      await client.connectWallet();
      
      const address = await client.getAddress();
      console.log(`‚úÖ Connected: ${address}`);

      if (options.file) {
        // Deploy from file
        await deployFromFile(client, options.file, args);
      } else {
        console.log('‚ùå Contract file is required. Use --file option.');
        process.exit(1);
      }

    } catch (error) {
      console.error('‚ùå Deployment failed:', error);
      process.exit(1);
    }
  });

program
  .command('connect')
  .description('Connect to wallet via QR code')
  .option('-c, --client <client>', 'Client type (ethers or viem)', 'ethers')
  .option('-n, --network <network>', 'Network name or chain ID', '1')
  .option('-p, --project-id <id>', 'WalletConnect Project ID')
  .action(async (options) => {
    try {
      const projectId = options.projectId || process.env.WALLETCONNECT_PROJECT_ID;
      
      if (!projectId) {
        console.error('‚ùå WalletConnect Project ID is required.');
        process.exit(1);
      }

      const chainId = parseInt(options.network) || getChainIdByName(options.network);
      
      const client = createSafe3Client({
        client: options.client,
        projectId,
        chainId
      });

      console.log('üîó Connecting to wallet...');
      await client.connectWallet();
      
      const address = await client.getAddress();
      console.log(`‚úÖ Connected: ${address}`);
      
    } catch (error) {
      console.error('‚ùå Connection failed:', error);
      process.exit(1);
    }
  });

program
  .command('status')
  .description('Check wallet connection status')
  .option('-c, --client <client>', 'Client type (ethers or viem)', 'ethers')
  .option('-p, --project-id <id>', 'WalletConnect Project ID')
  .action(async (options) => {
    try {
      const projectId = options.projectId || process.env.WALLETCONNECT_PROJECT_ID;
      
      if (!projectId) {
        console.error('‚ùå WalletConnect Project ID is required.');
        process.exit(1);
      }

      const client = createSafe3Client({
        client: options.client,
        projectId,
        chainId: 1
      });

      const isConnected = client.isConnected();
      
      if (isConnected) {
        const address = await client.getAddress();
        console.log(`‚úÖ Wallet connected: ${address}`);
      } else {
        console.log('‚ùå Wallet not connected');
      }
      
    } catch (error) {
      console.error('‚ùå Status check failed:', error);
      process.exit(1);
    }
  });

async function deployFromFile(client: any, filePath: string, args: any[]) {
  const fullPath = path.resolve(filePath);
  
  if (!fs.existsSync(fullPath)) {
    throw new Error(`Contract file not found: ${fullPath}`);
  }

  const fileContent = fs.readFileSync(fullPath, 'utf8');
  
  // Simple contract detection (in a real implementation, you'd use a proper compiler)
  if (filePath.endsWith('.sol')) {
    console.log('üìù Solidity file detected. Please compile first or use Hardhat integration.');
    console.log('üí° Tip: Use "npx hardhat safe3:deploy" for Solidity contracts.');
    return;
  }

  // For JSON files (compiled contracts)
  if (filePath.endsWith('.json')) {
    const contractData = JSON.parse(fileContent);
    
    if (contractData.abi && contractData.bytecode) {
      console.log('üìù Deploying contract from JSON...');
      
      if (client.getSigner) {
        // Ethers client
        const contract = await client.deployContractFromABI(
          contractData.abi,
          contractData.bytecode,
          ...args
        );
        
        const address = await contract.getAddress();
        console.log(`‚úÖ Contract deployed: ${address}`);
      } else {
        // Viem client
        const address = await client.deployContract({
          abi: contractData.abi,
          bytecode: contractData.bytecode,
          args
        });
        
        console.log(`‚úÖ Contract deployed: ${address}`);
      }
    } else {
      throw new Error('Invalid contract JSON file. Must contain "abi" and "bytecode" fields.');
    }
  } else {
    throw new Error('Unsupported file type. Use .sol or .json files.');
  }
}

function getChainIdByName(network: string): number {
  const networks: Record<string, number> = {
    'mainnet': 1,
    'ethereum': 1,
    'polygon': 137,
    'bsc': 56,
    'arbitrum': 42161,
    'optimism': 10,
    'base': 8453
  };

  return networks[network.toLowerCase()] || parseInt(network) || 1;
}

program.parse();
